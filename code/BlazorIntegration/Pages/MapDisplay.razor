@page "/mapDisplay"
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas.Canvas2D;
@using SquidLib.SquidMath;

<div>
    <BECanvas Width="@pixelWidth" Height="@pixelHeight" @ref="mapDisplay"></BECanvas>
</div>

@code {
    protected static int pixelWidth = 600;
    protected static int pixelHeight = 400;
    private string[] fillings = new string[] {
        "M", "y", "😀", "😆", "🤪", "🤔", "🤠"
    };

    private RNG rng = new RNG();
    private bool initialized = false;
    private Action onLoad = () => { };

    Canvas2DContext mapContext;

    BECanvasComponent mapDisplay;

    private int cellWidth = 10;
    private int cellHeight = 10;

    public int GridWidth() => pixelWidth / cellWidth;
    public int GridHeight() => pixelHeight / cellHeight;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        mapContext = await mapDisplay.CreateCanvas2DAsync();
        await mapContext.SetFontAsync("10x serif");
        await mapContext.SetTextAlignAsync(TextAlign.Center);
        await mapContext.SetTextBaselineAsync(TextBaseline.Middle);
        await Clear();
        onLoad();
    }

    public void OnLoad(Action action) {
        if (initialized) {
            action();
        } else {
            onLoad += action;
        }
    }

    public async Task Clear() {
        await mapContext.SetFillStyleAsync("#f5f5f0");
        await mapContext.FillRectAsync(0, 0, pixelWidth, pixelHeight);
        await mapContext.SetFillStyleAsync("#000000");
    }

    public async Task Put(int x, int y, string glyph) { // Takes a string to support unicode, but expecting a single output character
        await mapContext.FillTextAsync(glyph.ToString(), cellWidth * 0.5 + x * cellWidth, cellHeight * 0.5 + y * cellHeight);
    }
}
